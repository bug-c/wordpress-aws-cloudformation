Description: >
    Deploy Wordpress Cluster - Security groups templates.

Parameters:
    
    StackName:
        Description: An stack name that will be prefixed to resource names
        Type: String
        
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
    
    VPC:
        Type: AWS::EC2::VPC::Id
        Description: Choose which VPC the security groups should be deployed to

    PrivateSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
        Type: String

    PrivateSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
        Type: String
        
    PrivateSubnet3CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
        Type: String


Resources:

    # This security group defines who/where is allowed to access the ECS hosts directly.
    # By default we're just allowing access from the load balancer.  If you want to SSH
    # into the hosts, or expose non-load balanced services you can open their ports here.
    ECSHostSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            VpcId: !Ref VPC
            GroupDescription: Access to the ECS hosts and the tasks/containers that run on them
            SecurityGroupIngress:
                #Only allow inbound access to ECS from the ELB
                - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
                  IpProtocol: -1
                - SourceSecurityGroupId: !Ref InternalLoadBalancerSecurityGroup 
                  IpProtocol: -1
            Tags: 
                - Key: Name
                  Value: !Sub ${StackName}-ECS-Hosts
                - Key: Environment 
                  Value: !Ref EnvironmentName
                  
    # This security group defines who/where is allowed to access the Application Load Balancer.
    # By default, we've opened this up to the public internet (0.0.0.0/0) but can you restrict
    # it further if you want.
    LoadBalancerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            VpcId: !Ref VPC
            GroupDescription: Access to the load balancer that sits in front of ECS
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: '80'
                  ToPort: '80'
                  CidrIp: 0.0.0.0/0
                  Description: "Allow http public access"
                - IpProtocol: tcp
                  FromPort: '80'
                  ToPort: '80'
                  CidrIpv6: ::/0
                  Description: "Allow http public access"
                - IpProtocol: tcp
                  FromPort: '443'
                  ToPort: '443'
                  CidrIp: 0.0.0.0/0
                  Description: "Allow https public access"
                - IpProtocol: tcp
                  FromPort: '443'
                  ToPort: '443'
                  CidrIpv6: ::/0
                  Description: "Allow https public access"
            Tags: 
                - Key: Name
                  Value: !Sub ${StackName}-LoadBalancers
                - Key: Environment 
                  Value: !Ref EnvironmentName

    InternalLoadBalancerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            VpcId: !Ref VPC
            GroupDescription: Access to the internal load balancer that sits in front of ECS
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: '80'
                  ToPort: '80'
                  CidrIp: !Ref PrivateSubnet1CIDR
                  Description: "Allow http access from VPC private subnet1"
                - IpProtocol: tcp
                  FromPort: '80'
                  ToPort: '80'
                  CidrIp: !Ref PrivateSubnet2CIDR
                  Description: "Allow http access from VPC private subnet2"
                - IpProtocol: tcp
                  FromPort: '80'
                  ToPort: '80'
                  CidrIp: !Ref PrivateSubnet3CIDR
                  Description: "Allow http access from VPC private subnet3"
            Tags: 
                - Key: Name
                  Value: !Sub ${StackName}-InternalLoadBalancers
                - Key: Environment 
                  Value: !Ref EnvironmentName

    DBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId: !Ref VPC
            GroupDescription: Allow DB access from private subnets
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: '3306'
                  ToPort: '3306'
                  SourceSecurityGroupId: !Ref ECSHostSecurityGroup
                  Description: "Allow mysql access from all ECS hosts"

            Tags:
                - Key: Name
                  Value: !Sub ${StackName}-DB
                - Key: Environment
                  Value: !Ref EnvironmentName

Outputs:

    ECSHostSecurityGroup: 
        Description: A reference to the security group for ECS hosts
        Value: !Ref ECSHostSecurityGroup

    LoadBalancerSecurityGroup:
        Description: A reference to the security group for load balancers
        Value: !Ref LoadBalancerSecurityGroup
        
    InternalLoadBalancerSecurityGroup:
        Description: A reference to the security group for load balancers
        Value: !Ref InternalLoadBalancerSecurityGroup
        
    DBSecurityGroup:
        Description: A reference to the security group for DB
        Value: !Ref DBSecurityGroup
