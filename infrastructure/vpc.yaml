Description: >
    Deploy Wordpress Cluster - VPC template.
    This template deploys a VPC, with a pair of public, private and database subnets spread 
    across 3 Availabilty Zones. It deploys an Internet Gateway, with a default 
    route on the public subnets. It deploys a pair of NAT Gateways (one in each AZ), 
    and default routes for them in the private subnets and a database private network without NAT gateway or internet access.
  
Parameters:

    StackName:
        Description: An stack name that will be prefixed to resource names
        Type: String
        
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
        
    VpcCIDR: 
        Description: Please enter the IP range (CIDR notation) for this VPC
        Type: String

    PublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
        Type: String

    PublicSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
        Type: String

    PublicSubnet3CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
        Type: String

    PrivateSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
        Type: String

    PrivateSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
        Type: String
        
    PrivateSubnet3CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
        Type: String

    DBSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the DB subnet in the first Availability Zone
        Type: String

    DBSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the DB subnet in the second Availability Zone
        Type: String
        
    DBSubnet3CIDR:
        Description: Please enter the IP range (CIDR notation) for the DB subnet in the second Availability Zone
        Type: String

Resources:

    VPC: 
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsHostnames: true
            EnableDnsHostnames: true
            Tags: 
                - Key: Name 
                  Value: !Ref StackName
                - Key: Environment 
                  Value: !Ref EnvironmentName
            
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name 
                  Value: !Ref StackName
                - Key: Environment 
                  Value: !Ref EnvironmentName

    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    Ipv6Block:
        Type: AWS::EC2::VPCCidrBlock
        Properties:
            AmazonProvidedIpv6CidrBlock: true
            VpcId: !Ref VPC
            
    PublicSubnet1: 
        Type: AWS::EC2::Subnet
        DependsOn: Ipv6Block
        Properties:
            AssignIpv6AddressOnCreation: true
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet1CIDR
            Ipv6CidrBlock: !Select [1, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 256, 64]]
            Tags: 
                - Key: Name 
                  Value: !Sub ${StackName}-Public-AZ1
                - Key: Environment 
                  Value: !Ref EnvironmentName

    PublicSubnet2: 
        Type: AWS::EC2::Subnet
        DependsOn: Ipv6Block
        Properties:
            AssignIpv6AddressOnCreation: true
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet2CIDR
            Ipv6CidrBlock: !Select [2, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 256, 64]]
            Tags: 
                - Key: Name 
                  Value: !Sub ${StackName}-Public-AZ2
                - Key: Environment 
                  Value: !Ref EnvironmentName

    PublicSubnet3: 
        Type: AWS::EC2::Subnet
        DependsOn: Ipv6Block
        Properties:
            AssignIpv6AddressOnCreation: true
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 2, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet3CIDR
            Ipv6CidrBlock: !Select [3, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 256, 64]]
            Tags: 
                - Key: Name 
                  Value: !Sub ${StackName}-Public-AZ3
                - Key: Environment 
                  Value: !Ref EnvironmentName

    PrivateSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${StackName}-Private-AZ1
                - Key: Environment 
                  Value: !Ref EnvironmentName
                - Key: Environment 
                  Value: !Ref EnvironmentName

    PrivateSubnet2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${StackName}-Private-AZ2
                - Key: Environment 
                  Value: !Ref EnvironmentName

    PrivateSubnet3: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 2, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet3CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${StackName}-Private-AZ3
                - Key: Environment 
                  Value: !Ref EnvironmentName

    DBSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref DBSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${StackName}-DB-AZ1
                - Key: Environment 
                  Value: !Ref EnvironmentName

    DBSubnet2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref DBSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${StackName}-DB-AZ2
                - Key: Environment 
                  Value: !Ref EnvironmentName

    DBSubnet3: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 2, !GetAZs '' ]
            CidrBlock: !Ref DBSubnet3CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${StackName}-DB-AZ3
                - Key: Environment 
                  Value: !Ref EnvironmentName

    NatGateway1EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties: 
            Domain: vpc

    NatGateway2EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    NatGateway3EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    NatGateway1: 
        Type: AWS::EC2::NatGateway
        Properties: 
            AllocationId: !GetAtt NatGateway1EIP.AllocationId
            SubnetId: !Ref PublicSubnet1

    NatGateway2: 
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway2EIP.AllocationId
            SubnetId: !Ref PublicSubnet2

    NatGateway3: 
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway3EIP.AllocationId
            SubnetId: !Ref PublicSubnet3

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${StackName} Public Routes
                - Key: Environment 
                  Value: !Ref EnvironmentName

    DefaultPublicRoute: 
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties: 
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2
    
    PublicSubnet3RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet3

    PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${StackName} Private Routes (AZ1)
                - Key: Environment 
                  Value: !Ref EnvironmentName

    DefaultPrivateRoute1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway1

    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1

    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${StackName} Private Routes (AZ2)
                - Key: Environment 
                  Value: !Ref EnvironmentName

    DefaultPrivateRoute2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway2

    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref PrivateSubnet2

    PrivateRouteTable3:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${StackName} Private Routes (AZ3)
                - Key: Environment 
                  Value: !Ref EnvironmentName

    DefaultPrivateRoute3:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable3
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway3

    PrivateSubnet3RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable3
            SubnetId: !Ref PrivateSubnet3

    DBRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${StackName} DB Routes (AZ1)
                - Key: Environment 
                  Value: !Ref EnvironmentName

    # # DefaultDBRoute1:
        # # Type: AWS::EC2::Route
        # # Properties:
            # # RouteTableId: !Ref DBRouteTable1
            # # DestinationCidrBlock: 0.0.0.0/0

    DBSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref DBRouteTable1
            SubnetId: !Ref DBSubnet1

    DBRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${StackName} DB Routes (AZ2)
                - Key: Environment 
                  Value: !Ref EnvironmentName

    # DefaultDBRoute2:
        # Type: AWS::EC2::Route
        # Properties:
            # RouteTableId: !Ref DBRouteTable2
            # DestinationCidrBlock: 0.0.0.0/0

    DBSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref DBRouteTable2
            SubnetId: !Ref DBSubnet2

    DBRouteTable3:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${StackName} DB Routes (AZ3)
                - Key: Environment 
                  Value: !Ref EnvironmentName

    # DefaultDBRoute3:
        # Type: AWS::EC2::Route
        # Properties:
            # RouteTableId: !Ref DBRouteTable3
            # DestinationCidrBlock: 0.0.0.0/0

    DBSubnet3RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref DBRouteTable3
            SubnetId: !Ref DBSubnet3

    EndpointS3:
        Type: 'AWS::EC2::VPCEndpoint'
        Properties:
            RouteTableIds: 
                - !Ref PrivateRouteTable1
                - !Ref PrivateRouteTable2
                - !Ref PrivateRouteTable3
            ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
            VpcId: !Ref VPC
            
    PublicNetworkAcl:
        Type: AWS::EC2::NetworkAcl
        DependsOn: VPC
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name 
                  Value: !Sub ${StackName}-Public
                - Key: Environment 
                  Value: !Ref EnvironmentName

    PublicNetworkAclAssociation1:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref PublicSubnet1
            NetworkAclId: !Ref PublicNetworkAcl 

    PublicNetworkAclAssociation2:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref PublicSubnet2
            NetworkAclId: !Ref PublicNetworkAcl 
    
    PublicNetworkAclAssociation3:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref PublicSubnet3
            NetworkAclId: !Ref PublicNetworkAcl 
            
    PrivateNetworkAcl:
        Type: AWS::EC2::NetworkAcl
        DependsOn: VPC
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name 
                  Value: !Sub ${StackName}-Private
                - Key: Environment 
                  Value: !Ref EnvironmentName

    PrivateNetworkAclAssociation1:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref PrivateSubnet1
            NetworkAclId: !Ref PrivateNetworkAcl 

    PrivateNetworkAclAssociation2:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref PrivateSubnet2
            NetworkAclId: !Ref PrivateNetworkAcl 
    
    PrivateNetworkAclAssociation3:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref PrivateSubnet3
            NetworkAclId: !Ref PrivateNetworkAcl 
        
    DBNetworkAcl:
        Type: AWS::EC2::NetworkAcl
        DependsOn: VPC
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name 
                  Value: !Sub ${StackName}-DB
                - Key: Environment
                  Value: !Ref EnvironmentName

    DBNetworkAclAssociation1:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref DBSubnet1
            NetworkAclId: !Ref DBNetworkAcl

    DBNetworkAclAssociation2:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref DBSubnet2
            NetworkAclId: !Ref DBNetworkAcl
    
    DBNetworkAclAssociation3:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref DBSubnet3
            NetworkAclId: !Ref DBNetworkAcl

    Role:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: Allow
                      Principal:
                        Service:
                            - 'vpc-flow-logs.amazonaws.com'
                      Action: 'sts:AssumeRole'
            Policies:
                - PolicyName: 'flowlogs-policy'
                  PolicyDocument:
                    Version: '2012-10-17'
                    Statement:
                        - Effect: Allow
                          Action:
                            - 'logs:CreateLogStream'
                            - 'logs:PutLogEvents'
                            - 'logs:DescribeLogGroups'
                            - 'logs:DescribeLogStreams'
                          Resource: !GetAtt 'LogGroup.Arn'
    LogGroup:
        Type: 'AWS::Logs::LogGroup'
        Properties:
            LogGroupName: !Sub ${StackName}-VPC
            RetentionInDays: 30

    FlowLog:
        Type: 'AWS::EC2::FlowLog'
        Properties:
            DeliverLogsPermissionArn: !GetAtt 'Role.Arn'
            LogGroupName: !Ref LogGroup
            ResourceId: !Ref VPC
            ResourceType: 'VPC'
            TrafficType: ALL

Outputs: 

    VPC: 
        Description: A reference to the created VPC
        Value: !Ref VPC

    PublicSubnets:
        Description: A list of the public subnets
        Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3 ]]

    PrivateSubnets:
        Description: A list of the private subnets
        Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3 ]]

    # PublicSubnet1:
        # Description: A reference to the public subnet in the 1st Availability Zone
        # Value: !Ref PublicSubnet1

    # PublicSubnet2: 
        # Description: A reference to the public subnet in the 2nd Availability Zone
        # Value: !Ref PublicSubnet2

    # PublicSubnet3: 
        # Description: A reference to the public subnet in the 3nd Availability Zone
        # Value: !Ref PublicSubnet3

    # PrivateSubnet1:
        # Description: A reference to the private subnet in the 1st Availability Zone
        # Value: !Ref PrivateSubnet1

    # PrivateSubnet2: 
        # Description: A reference to the private subnet in the 2nd Availability Zone
        # Value: !Ref PrivateSubnet2
        
    # PrivateSubnet3: 
        # Description: A reference to the private subnet in the 3nd Availability Zone
        # Value: !Ref PrivateSubnet3

    PublicNetworkAcl: 
        Description: A reference to the public network acl
        Value: !Ref PublicNetworkAcl        
        
    PrivateNetworkAcl: 
        Description: A reference to the private network acl
        Value: !Ref PrivateNetworkAcl
        
    DBNetworkAcl: 
        Description: A reference to the DB network acl
        Value: !Ref DBNetworkAcl
